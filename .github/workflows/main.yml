name: CI/CD Pipeline

env:
  IMAGE_NAME: emogi-prod
  CONTAINER_NAME: emogi-app
  PROJECT_PATH: /home/ec2-user/emogi

on:
  push:
    branches: ["main"]

jobs:
  test:
    runs-on: ubuntu-22.04
    services:
      postgres:
        image: postgres:16.4-bullseye
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: emogi
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Install dependencies
        run: poetry install --with dev

      - name: Create env file
        env:
          ENV_CONTENT: ${{ secrets.ENV_FILE }}
        run: echo "$ENV_CONTENT" > .env.dev
            
      - name: Run tests
        env:
          ENV: prod
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: emogi
        run: poetry run pytest

  build:
    # needs: test
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Get and update version
        id: version
        run: bash ./scripts/update-version.sh --version-up true "${{ github.ref }}" "${{ github.run_number }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6.7.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to EC2
        run: |
          chmod +x scripts/deploy-prod.sh
          ./scripts/deploy-prod.sh \
            -i ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }} \
            -t ${{ needs.build.outputs.version }} \
            -n ${{ env.CONTAINER_NAME }} \
            -p 8000 \
            -e prod \
            --env-value prod \
            --name-value emogi-ec2-app

  health-check:
    needs: deploy
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Execute health check
        run: |
          chmod +x scripts/health-check.sh
          ./scripts/health-check.sh \
            -p 8000 \
            --env-tag Environment \
            --env-value prod \
            --name-tag Name \
            --name-value emogi-ec2-app \
            --path health \
            -c 10 \
            -i 2 \
            -s 3

  notify:
    needs: [test, build, deploy, health-check]
    runs-on: ubuntu-22.04
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate Discord message
        run: |
          message=$(bash ./scripts/discord-message.sh \
              "${{ github.repository }}" \
              "${{ github.ref_name }}" \
              "${{ needs.build.outputs.version }}" \
              "${{ github.event.head_commit.message }}" \
              "${{ needs.test.result }}" \
              "${{ needs.build.result }}" \
              "${{ needs.deploy.result }}" \
              "${{ needs.health-check.result }}" \
              "${{ github.event.head_commit.timestamp }}")
          echo "DISCORD_EMBEDS=${message}" >> $GITHUB_ENV

      - name: Discord notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}

name: CI/CD Pipeline

env:
  IMAGE_NAME: emogi-dev
  CONTAINER_NAME: emogi-app
  PROJECT_PATH: /home/isakin/project/emogi

on:
  push:
    branches: ["develop"]

jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}

      - name: Get and update version
        id: version
        run: bash ./scripts/update_version.sh "${{ github.ref }}" "${{ github.run_number }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6.7.0
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

  deploy:
    needs: build
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy deployment files
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: "docker-compose.yml,scripts/deploy_dev.sh"
          target: ${{ env.PROJECT_PATH }}

      - name: Execute deploy script
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd ${{ env.PROJECT_PATH }}
            bash ./scripts/deploy_dev.sh "${{ env.PROJECT_PATH }}" "${{ secrets.DOCKER_USERNAME }}" "${{ env.IMAGE_NAME }}" "${{ needs.build.outputs.version }}"

  health-check:
      needs: deploy
      runs-on: ubuntu-22.04
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Copy health check script
          uses: appleboy/scp-action@master
          with:
            host: ${{ secrets.SSH_HOST }}
            port: ${{ secrets.SSH_PORT }}
            username: ${{ secrets.SSH_USERNAME }}
            password: ${{ secrets.SSH_PASSWORD }}
            source: "scripts/health_check.sh"
            target: ${{ env.PROJECT_PATH }}

        - name: Execute health check script
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.SSH_HOST }}
            port: ${{ secrets.SSH_PORT }}
            username: ${{ secrets.SSH_USERNAME }}
            password: ${{ secrets.SSH_PASSWORD }}
            script: |
              cd ${{ env.PROJECT_PATH }}
              bash ./scripts/health_check.sh "${{ env.PROJECT_PATH }}"

  notify:
    needs: [build, deploy, health-check]
    runs-on: ubuntu-22.04
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate Discord message
        id: discord_message
        run: |
          message=$(bash ./scripts/discord_message.sh \
              "${{ github.repository }}" \
              "${{ github.ref_name }}" \
              "${{ needs.build.outputs.version }}" \
              "${{ github.event.head_commit.message }}" \
              "${{ needs.test.result }}" \
              "${{ needs.build.result }}" \
              "${{ needs.deploy.result }}" \
              "${{ needs.health-check.result }}" \
              "${{ github.event.head_commit.timestamp }}")
          echo "DISCORD_EMBEDS=${message}" >> $GITHUB_ENV

      - name: Discord notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}

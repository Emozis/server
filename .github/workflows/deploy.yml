name: CI/CD Pipeline

env:
    IMAGE_NAME: emogi-app
    CONTAINER_NAME: emogi-app
    PROJECT_PATH: /home/isakin/project/emogi

on:
    push:
        branches: ["main", "develop"]

jobs:
    test:
        runs-on: ubuntu-latest
        steps:
          - uses: actions/checkout@v4

          - name: Install poetry
            run: |
                curl -sSL https://install.python-poetry.org | python3 -

          - name: Install dependencies
            run: poetry install --with dev

          - name: Create env file
            run: |
                echo '${{ secrets.ENV_FILE }}' | base64 -d > .env
                
          - name: Run tests
            run: |
                cat .env
                poetry run pytest

    build-and-push:
        needs: test
        runs-on: ubuntu-latest
        outputs:
            version: ${{ steps.version.outputs.version }}
        steps:
          - name: Checkout code
            uses: actions/checkout@v4
            with:
                token: ${{ secrets.ACCESS_TOKEN }}

          - name: Get and update version
            id: version
            run: bash ./scripts/update_version.sh "${{ github.ref }}" "${{ github.run_number }}"

          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v3

          - name: Login to DockerHub
            uses: docker/login-action@v3.3.0
            with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}

          - name: Build and push Docker image
            uses: docker/build-push-action@v6.7.0
            with:
                context: .
                file: ./Dockerfile
                push: true
                tags: |
                    ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
                    ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest

    deploy-to-server:
        needs: build-and-push
        runs-on: ubuntu-latest
        steps:
          - name: Checkout code
            uses: actions/checkout@v4

          - name: Copy deployment files
            uses: appleboy/scp-action@master
            with:
                host: ${{ secrets.SSH_HOST }}
                port: ${{ secrets.SSH_PORT }}
                username: ${{ secrets.SSH_USERNAME }}
                password: ${{ secrets.SSH_PASSWORD }}
                source: "docker-compose.yml,scripts/deploy.sh"
                target: ${{ env.PROJECT_PATH }}

          - name: Execute deploy script
            uses: appleboy/ssh-action@master
            with:
                host: ${{ secrets.SSH_HOST }}
                port: ${{ secrets.SSH_PORT }}
                username: ${{ secrets.SSH_USERNAME }}
                password: ${{ secrets.SSH_PASSWORD }}
                script: |
                    cd ${{ env.PROJECT_PATH }}
                    bash ./scripts/deploy.sh "${{ env.PROJECT_PATH }}" "${{ secrets.DOCKER_USERNAME }}" "${{ env.IMAGE_NAME }}" "${{ needs.build-and-push.outputs.version }}"

    notify:
        needs: [build-and-push, deploy-to-server]
        runs-on: ubuntu-latest
        if: always()
        steps:
          - name: Checkout code
            uses: actions/checkout@v4
          
          - name: Generate Discord message
            id: discord_message
            run: |
                message=$(bash ./scripts/discord_message.sh \
                    "${{ github.repository }}" \
                    "${{ github.ref_name }}" \
                    "${{ needs.build-and-push.outputs.version }}" \
                    "${{ github.event.head_commit.message }}" \
                    "${{ needs.build-and-push.result }}" \
                    "${{ needs.deploy-to-server.result }}" \
                    "${{ github.event.head_commit.timestamp }}")
                echo "DISCORD_EMBEDS=${message}" >> $GITHUB_ENV

          - name: Discord notification
            uses: Ilshidur/action-discord@master
            env:
                DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
